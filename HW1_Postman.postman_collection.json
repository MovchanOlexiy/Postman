{
	"info": {
		"_postman_id": "2ccb1772-13cb-46f3-8609-d6835b72cfcf",
		"name": "HW1_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Приходящий токен необходимо передать во все остальные запросы\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "IrKosh",
							"type": "text"
						},
						{
							"key": "password",
							"value": "irkosh",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить статус код 200\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let salary = number(pm.variables.get(\"salary\"))\r",
							"pm.test(\"Json answer\",function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);\r",
							"    pm.expect((jsonData.qa_salary_after_12_months)).to.eql(salary*2.9);\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Проерка ответа\r",
							"pm.test(\"Json answer\",function() {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.person.u_age).to.eql(38);\r",
							"   pm.expect(jsonData.person.u_name[0]).to.eql(\"Irina\");\r",
							"   pm.expect(jsonData.person.u_name[1]).to.eql(1000);\r",
							"   pm.expect(jsonData.person.u_name[2]).to.eql(38);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"var schema = {\r",
							"    \"definitions\": {},\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\"type\": \"integer\"},\r",
							"        \"u_name\": {\"type\": \"array\",\r",
							"          \"items\": [\r",
							"              {\"type\": \"string\"},\r",
							"              {\"type\": \"integer\"},\r",
							"              {\"type\": \"integer\"}\r",
							"          ]},\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}},\r",
							"      \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"]},\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"    \"start_qa_salary\": {\"type\": \"integer\"}},\r",
							"  \"required\": [\"person\", \"qa_salary_after_12_months\",\"qa_salary_after_6_months\",\"start_qa_salary\"]};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// передача \"u_salary_1_5_year\" в окружение\r",
							"let resData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"u_salary_1_5_year\", resData.person.u_salary_1_5_year);\r",
							"\r",
							"// передача \"name\" в окружение\r",
							"let namData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"name\", namData.person.u_name[0]);\r",
							"\r",
							"\r",
							"// передача \"age\" в окружение\r",
							"let ageData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"age\", ageData.person.u_age);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Irina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверка статус кода\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"Integer\"},\r",
							"        \"name\": {\"type\": \"String\"},\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                  {\"type\": \"integer\"},\r",
							"                  {\"type\": \"string\"},\r",
							"                  {\"type\": \"string\"}\r",
							"             ]}\r",
							"}};\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var valid = tv4.validate(jsonData, schema)\r",
							"});\r",
							"\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"Json answer\",function() {\r",
							"   let salary = Number(pm.variables.get(\"salary\"));\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary*1);\r",
							"    pm.expect(Number(jsonData.salary[1])).to.deep.eql(salary*2);\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Salary iql\", function ()  {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Number(jsonData.salary[2])).lessThan(Number(jsonData.salary[0]));\r",
							"    pm.expect(Number(jsonData.salary[2])).greaterThan(Number(jsonData.salary[1]));\r",
							"} );\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Irina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверка статуса кода\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"Food_and_sleep\", function () { \r",
							"let weight = pm.variables.get(\"weight\");\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.daily_sleep).to.eq(weight*2.5);\r",
							"pm.expect(jsonData.daily_food).to.eq(weight*0.012);\r",
							"}); \r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"Schema\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.age).to.be.an(\"Number\");\r",
							"    pm.expect(jsonData.daily_food).to.be.an(\"Number\");\r",
							"    pm.expect(jsonData.daily_sleep).to.be.an(\"Number\");\r",
							"    pm.expect(jsonData.name).to.be.an(\"String\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "6",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Lunya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"pm.test(\"Schema\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData).to.be.an(\"object\");\r",
							"pm.expect(jsonData.age).to.be.an(\"String\"); //string\r",
							"pm.expect(jsonData.name).to.be.an(\"string\");\r",
							"pm.expect(jsonData.salary).to.be.an(\"Number\");\r",
							"pm.expect(jsonData.family.children).to.be.an(\"array\");\r",
							"pm.expect(jsonData.family.children).to.be.an(\"array\");\r",
							"pm.expect(jsonData.family.children[0][0]).to.be.an(\"String\");\r",
							"pm.expect(jsonData.family.children[1][0]).to.be.an(\"String\");\r",
							"pm.expect(jsonData.family.children[0][1]).to.be.an(\"Number\");\r",
							"pm.expect(jsonData.family.children[1][1]).to.be.an(\"Number\");\r",
							"} );\r",
							"\r",
							"\r",
							"// Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var request_data = request.data;\r",
							"console.log(request_data.age);\r",
							"\r",
							"\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"environment to be production\", function () {\r",
							"    pm.expect(pm.environment.get(\"name\")).to.equal(\"Irina\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Можете взять любой объект из присланного списка, используйте js random\r",
							"const namData = pm.response.json();\r",
							"let randomID = namData[Math.floor(Math.random()*namData.length)\r",
							"];\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос\r",
							"pm.environment.set('randomCur_ID', randomID.Cur_ID);\r",
							"console.log(randomID.Cur_ID);\r",
							"\r",
							"\r",
							"// вывести Cur_ID в console\r",
							"for(let i = 0; i < 227; i++){\r",
							"    let ID = namData[i];\r",
							"    console.log(ID.Cur_ID);\r",
							"    //pm.environment.get ('Cur_ID_test'+i, ID.Cur_ID);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//) Статус код 200\r",
							"pm.test(\"Statua code\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\"type\": \"String\"},\r",
							"        \"Cur_ID\": {\"type\": \"integer\"},\r",
							"        \"Cur_Name\": {\"type\": \"String\"},\r",
							"        \"Cur_OfficialRate\": {\"type\": \"integer\"},\r",
							"        \"Cur_Scale\": {\"type\": \"String\"}\r",
							"}};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// подсчет количесва объектов\r",
							"//console.log(jsonData.length);   // 227\r",
							"\r",
							"\r",
							"// итерация объектов\r",
							"//jsonData.forEach(function(item, index, array) {\r",
							"//  console.log(item, index);\r",
							"//});\r",
							"var jsonData = pm.response.json();\r",
							"jsonData.forEach(function(item){\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"url\")+'/curr_byn',\r",
							"        method: 'POST',\r",
							"        body: {\r",
							"            mode: \"urlenvcoded\",\r",
							"            urlencoded: [\r",
							"                {key: \"auth_token\", value: pm.environment.get[\"token\"]},\r",
							"                {key: \"curr_code\", value: item[\"Cur_ID\"]},\r",
							"            ]\r",
							"        }\r",
							"    }, function(err, res) {\r",
							"        if (res[\"code\"]===500) {}\r",
							"            //send('Something broke!')}\r",
							"        else if (res[\"code\"]===200) {\r",
							"            var response = res.json()\r",
							"            if (response[\"Cur_OfficialRate\"]) {\r",
							"                console.log(response);\r",
							"                         \r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//вывести все Cur_ID в консоль\r",
							"let jsonData = pm.response.json();\r",
							"jsonData.forEach(function(item){\r",
							"    console.log(item[\"Cur_ID\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}